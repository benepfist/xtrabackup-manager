#!/usr/bin/php
<?php
/*

Copyright 2011 Marin Software

This file is part of Xtrabackup Manager.

Xtrabackup Manager is free software: you can redistribute it and/or modify
it under the terms of the GNU General Public License as published by
the Free Software Foundation, either version 2 of the License, or
(at your option) any later version.

Xtrabackup Manager is distributed in the hope that it will be useful,
but WITHOUT ANY WARRANTY; without even the implied warranty of
MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
GNU General Public License for more details.

You should have received a copy of the GNU General Public License
along with Xtrabackup Manager.  If not, see <http://www.gnu.org/licenses/>.

*/

	/* xbm-backup - Wrapper script to launch backup events. */

	
	require('includes/init.php');

	// Defined options, used for helptext only.
	$optDef = Array(
					'h' => 'Help - Display this help text.',
					's' => 'The Scheduled Backup ID to launch/run.',
					'f' => 'Force the backup to run even if it is not flagged as active.',
					'q' => 'Run in quiet mode - no output except for fatal errors'
				);
	ksort($optDef);

	// Define options and get them from cmdline
	$shortOpts = 'hs:q';
	$options = getOpt($shortOpts);



	if(!isSet($options['q']))
		print("\n".basename(__FILE__)." -- ".XBM_RELEASE_VERSION."\n");

	if(isSet($options['s']) && !is_numeric($options['s']) ) {
		print("\nThe -s option must be numeric.\n");
		// Show help text
		$options['h'] = true;
	}
	if(!isSet($options['s']) ) {
		print("\nThe -s options is required.\n");
		// Show help text
		$options['h'] = true;
	}

	// Catch the -h option first - print help text
	if( isSet($options['h']) || sizeOf($options) == 0 ) {
		$msg = "\nParameters: \n";
		foreach($optDef as $opt => $desc) {
			$msg .= "  -".$opt."	".$desc."\n";
		}
		print($msg."\n\n");	
		die();

	}

	if(!isSet($options['q']))	
		print("\n");

	try {

		// Setup logStream
		$log = new logStream(XBM_MAIN_LOG, false, $config['LOGS']['level']);


		// Fetch the scheduled backup
		$scheduledBackupGetter = new scheduledBackupGetter();
		$scheduledBackupGetter->setLogStream($log);
		
		$scheduledBackup = $scheduledBackupGetter->getById($options['s']);
	
	
		$scheduledBackupInfo = $scheduledBackup->getInfo();
	
		// If we are not in FORCE mode - check if the scheduled backup is active
		if( ! isSet($options['f']) ) {
	
			if( ! $scheduledBackup->isActive()) {
				print(basename(__FILE__).": The specified backup is not active - Reason: ".$scheduledBackup->inactive_reason." -- exiting...\n");
				die();
			} 
				
		}
	

		// Proceed with the backup!
		$snapshotTaker = new backupSnapshotTaker();
	
		$snapshotTaker->setLogStream($log);
	
		// If we are in quiet mode, turn off the output to stdout
		if(isSet($options['q']) ) {
			$snapshotTaker->setInfoLogVerbose(false);
		}
	
		$snapshotTaker->takeScheduledBackupSnapshot($scheduledBackup);
	
	} catch ( Exception $e ) {

		if($config['ALERTS']['enabled'] == true) {

			try {

				$host = $scheduledBackup->getHost();
				$hostInfo = $host->getInfo();
				$sbInfo = $scheduledBackup->getInfo();

				$subj =  "XtraBackup Manager - ALERT - Backup Failure for ".$hostInfo['hostname']." in ".basename(__FILE__);
						
				$msg =  "A fatal error occurred while attempting to run the following backup\n\n";
				$msg .= "Host: ".$hostInfo['hostname']." - ".$hostInfo['description']."\n";
				$msg .= "Scheduled Backup: ".$sbInfo['name']."\n";
				$msg .= "Exception details:\n".$e->getMessage();
				$msg .= "Trace:\n".$e->getTraceAsString()."\n\n";

			} catch ( Exception $secondaryException ) {

				$subj =  "XtraBackup Manager - ALERT - Backup Failure in ".basename(__FILE__);

				$msg =  "A fatal error occurred while attempting to run a backup:\n\n";
				$msg .= "Exception details:\n".$e->getMessage();
				$msg .= "Trace:\n".$e->getTraceAsString()."\n\n";
				$msg .= "Additionally a further error occurred while attempting to collect information on the original exception:\n\n";
				$msg .= "Exception details:\n".$secondaryException->getMessage();
				$msg .= "Trace:\n".$secondaryException->getTraceAsString()."\n\n";

			}

			$msg .= "-- \nThis was an automated message from XtraBackup Manager ".XBM_RELEASE_VERSION."\n\n";

			if( ! mail($config['ALERTS']['email'], $subj, $msg, 'From: XtraBackup Manager <'.$config['ALERTS']['replyto'].'>') ) {
					$log->write(basename(__FILE__).": Error: Failed to send alert email!", XBM_LOG_ERROR);
			}
		}

		print(basename(__FILE__).": ".$e->getMessage()."\nTrace:\n".$e->getTraceAsString()."\n");
		die();
	}		
	/* vi: set filetype=php */
?>
